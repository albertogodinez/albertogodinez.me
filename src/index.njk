---
layout: layouts/base.njk
title: Home
eleventyNavigation:
  key: Home
  order: 1
---
<script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>

<div id="description">
  <strong>
    Hi, I'm Alberto!
  </strong>
  <p>
    I'm a software engineer by day but also enjoy my other little passions on my 
    free time
  </p>
  <p>
  (<a href="{{ metadata.links.instagramNFK }}">natural dyeing</a>, sneaker connoisseur, enjoying good food & coffee).
  </p>
  </br>
  <p>
    Below you'll find little snippets of my experience and previous work. Feel free to look around!
  </p>
</div>

<div id="draggableToolBar">
  <button class="button" onclick="handleVisibleNotes('all')">Show All</button>
  <button class="button" onclick="handleVisibleNotes('experience')">Experience</button>
  <button class="button" onclick="handleVisibleNotes('projects')">Projects</button>
  <button class="button" onclick="handleVisibleNotes('education')">Education</button>
</div>

{% set draggableNotes = collections.draggableNotes %}
{% include "draggableNotes.njk" %}

<script>
  const notes = new Map(); // key: noteType, value: html element
  const noteVisibility = new Map(); // key: noteType, value: isVisible boolean

  // save notes elements to variable to remove/add in future
  window.addEventListener("load", () => {
    [...document.querySelectorAll("[data-isDraggable = true]")].forEach((note) => {
      const key = note.getAttribute('data-noteType');
      if (notes.has(key)) {
        const updatedNotes = notes.get(key);
        updatedNotes.push(note);
        notes.set(key, updatedNotes)
      } else {
        notes.set(key, new Array(note))
        noteVisibility.set(key, true);
      }
    })
  });

  function showDraggableNotes(noteType) {
    noteVisibility.set(noteType, true);

    const draggableArea = document.querySelector('#draggableNotesArea');
    
    // append all notes to draggable area
    for (note of notes.get(noteType)) {
      draggableArea.append(note);
    }
  }

  function hideDraggableNotes(noteType) {
    noteVisibility.set(noteType, false);

    const draggableNotes = document.querySelectorAll("[data-noteType = " + noteType + "]");
    // remove all notes from DOM
    for (note of draggableNotes) {
      note.parentNode.removeChild(note);
    }
  }

  // handle which notes are shown
  function handleVisibleNotes (noteType) {
    if (noteType === 'all') {
      // iterate through each note and show if hidden
      for (key of notes.keys()) {
        // console.log('current key: ' + key)
        // skip 'all' since that's not a valid noteType
        if (key !== 'all' && !noteVisibility.get(key)) {
          // notes are hidden so need to show
          showDraggableNotes(key);
        }
      }
    } else if (!noteVisibility.get(noteType)) { // notes are hidden
      showDraggableNotes(noteType);
    } else { // notes are visibel
      hideDraggableNotes(noteType);
    }
  }

  // target elements with the "draggable" class
  interact('.draggable')
    .draggable({
    // enable inertial throwing
    inertia: true,
    // keep the element within the area of it's parent
    modifiers: [
      interact.modifiers.restrictRect({
        restriction: 'parent',
        endOnly: true
      })
    ],
    // enable autoScroll
    autoScroll: true,

    listeners: {
      // call this function on every dragmove event
      move: dragMoveListener,

      // call this function on every dragend event
      end (event) {
        var textEl = event.target.querySelector('p')

        textEl && (textEl.textContent =
          'moved a distance of ' +
          (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +
                     Math.pow(event.pageY - event.y0, 2) | 0))
            .toFixed(2) + 'px')
      }
    }
  })

  function dragMoveListener (event) {
    var target = event.target

    // add isDragging class
    // TODO: figure this out
    /*if (!target.id.includes('isDragging')) {
      target.id += 'isDragging'
      console.log(target)
    }*/
    // keep the dragged position in the data-x/data-y attributes
    var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
    var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

    // translate the element
    target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

    // update the posiion attributes
    target.setAttribute('data-x', x)
    target.setAttribute('data-y', y)
  }

  // this function is used later in the resizing and gesture demos
  window.dragMoveListener = dragMoveListener
  /* The dragging code for '.draggable' from the demo above
  * applies to this demo as well so it doesn't have to be repeated. */

  // enable draggables to be dropped into this
  interact('.dropzone').dropzone({
    // only accept elements matching this CSS selector
    accept: '#yes-drop',
    // Require a 75% element overlap for a drop to be possible
    overlap: 0.75,

    // listen for drop related events:

    ondropactivate: function (event) {
      // add active dropzone feedback
      event.target.classList.add('drop-active')
    },
    ondragenter: function (event) {
      var draggableElement = event.relatedTarget
      var dropzoneElement = event.target

      // feedback the possibility of a drop
      dropzoneElement.classList.add('drop-target')
      draggableElement.classList.add('can-drop')
      draggableElement.textContent = 'Dragged in'
    },
    ondragleave: function (event) {
      // remove the drop feedback style
      event.target.classList.remove('drop-target')
      event.relatedTarget.classList.remove('can-drop')
      event.relatedTarget.textContent = 'Dragged out'
    },
    ondrop: function (event) {
      event.relatedTarget.textContent = 'Dropped'
    },
    ondropdeactivate: function (event) {
      // remove active dropzone feedback
      event.target.classList.remove('drop-active')
      event.target.classList.remove('drop-target')
    }
  })

  interact('.drag-drop')
    .draggable({
      inertia: true,
      modifiers: [
        interact.modifiers.restrictRect({
          restriction: 'parent',
          endOnly: true
        })
      ],
      autoScroll: true,
      // dragMoveListener from the dragging demo above
      listeners: { move: dragMoveListener }
    })
</script>
